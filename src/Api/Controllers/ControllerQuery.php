<?php

namespace ComicVine\Api\Controllers;

use ComicVine\Api\Validation;
use ComicVine\Api\Response\Type\ResponseFormat;
use ComicVine\ComicVine;

/**
 * Class responsible for creating a proper
 * query to ComicVine.
 *
 * Class ControllerApi
 *
 * @package grzgajda/comicvine-api
 * @author  Grzegorz Gajda <grz.gajda@outlook.com>
 */
class ControllerQuery
{

    /**
     * List of enabled filters generated by ControllerRequest.
     *
     * @var array
     */
    protected $enabledFilters = [];

    /**
     * List of setted filters by user.
     *
     * @var array
     */
    protected $settedFilters
        = [
            'field_list' => '',
            'limit'      => 100,
            'offset'     => 0,
            'filter'     => '',
            'sort'       => '',
            'api_key'    => '',
        ];

    /**
     * Part of url to proper resource.
     *
     * @var string
     */
    protected $url = "";

    /**
     * Connection instance.
     *
     * @var Connection
     */
    private $connection;

    /**
     * Validation object.
     *
     * @var Validation
     */
    private $validation;

    /**
     * ControllerQuery constructor.
     *
     * @param array  $filters List of enabled filters
     * @param string $url     Part of URL
     */
    public function __construct($filters, $url)
    {
        $this->enabledFilters           = $filters;
        $this->url                      = $url;
        $this->validation               = new Validation();
        $this->settedFilters['api_key'] = ComicVine::getKey();
        $this->connection               = ComicVine::getConnection();
    }

    /**
     * Set fields to get in response.
     *
     * @param array $arr
     *
     * @return $this
     */
    public function setFieldList($arr = [])
    {
        if ($this->validation->validation('field_list', $arr) === true) {
            $this->iterateFieldList($arr);
        }

        return $this;
    }

    /**
     * Set filters for request.
     *
     * @param array $arr Filters defined by user.
     *
     * @return $this
     */
    public function setFilters($arr = [])
    {
        if ($this->validation->validation('filter', $arr) === true) {
            $this->iterateFilterOrSort($arr, 'filter');
        }

        return $this;
    }

    /**
     * Set sort for request.
     *
     * @param array $arr Sort defined by user
     *
     * @return $this
     */
    public function setSorts($arr = [])
    {
        if ($this->validation->validation('sort', $arr) === true) {
            $this->iterateFilterOrSort($arr, 'sort');
        }

        return $this;
    }

    /**
     * Set limit for request.
     *
     * @param int $limit Limit for elements. Limit can only be between 0 and 100.
     *
     * @return $this
     */
    public function setLimit($limit = 100)
    {
        if ($this->validation->validation('limit', $limit) === true) {
            $this->settedFilters['limit'] = $limit;
        }

        return $this;
    }

    /**
     * Set offset for request.
     *
     * @param int $offset Offset for elements.
     *
     * @return $this
     */
    public function setOffset($offset = 0)
    {
        if ($this->validation->validation('offset', $offset) === true) {
            $this->settedFilters['offset'] = $offset;
        }

        return $this;
    }

    /**
     * Set format for response.
     *
     * @param \ComicVine\Api\Response\Type\ResponseFormat $format
     *
     * @return $this
     */
    public function setFormat(ResponseFormat $format)
    {
        $this->settedFilters['format'] = array_values($format->get())[0];

        return $this;
    }

    /**
     * Get reponse from Connection instance.
     *
     * @return mixed
     */
    public function getResponse()
    {
        return ComicVine::getConnection()->makeConnection()
            ->setConnection($this->build())
            ->getResult();
    }

    /**
     * Add new filter or sort to settedFilters array.
     *
     * @param string     $type  Type: sort|filter
     * @param string     $param Param for request
     * @param string     $value Value for request
     * @param bool|false $last  Is element last?
     */
    protected function addFilterOrSort($type, $param, $value, $last = false)
    {
        if ($last === false) {
            $this->settedFilters[$type] .= $param.':'.urlencode($value).',';
        }

        if ($last === true) {
            $this->settedFilters[$type] .= $param.':'.urlencode($value);
        }
    }

    /**
     * Iterate array to add elements to class variable.
     *
     * @param array  $array Array of elements to iterate
     * @param string $type  Type of elements: sort|filter
     */
    protected function iterateFilterOrSort($array, $type)
    {
        foreach ($array as $key => $value) {
            $allKeys = array_keys($array);
            $last    = (end($allKeys) === $key) ? true : false;
            $this->addFilterOrSort($type, $key, $value, $last);
        }
    }

    /**
     * Iterate array to set allowed fields in response.
     *
     * @param array $array List of allowed fields in request.
     */
    protected function iterateFieldList($array)
    {
        for ($i = 0; $i < count($array); $i++) {
            $last = ($i === count($array) - 1) ? true : false;
            $this->settedFilters['field_list'] .= $array[$i];

            if ($last !== true) {
                $this->settedFilters['field_list'] .= ',';
            }
        }
    }

    /**
     * Build full url from protected attributes.
     *
     * @return string
     */
    protected function build()
    {
        $url   = "http://www.comicvine.com/api".$this->url.'/?';
        $query = urldecode(http_build_query($this->settedFilters, '', '&'));

        return $url.$query;

    }

    /**
     * Prepare connection for results.
     *
     * @param string $url Full url for Connection instance.
     *
     * @return mixed
     */
    protected function getData($url)
    {
        return ComicVine::getConnection()->makeConnection()->setConnection($url);
    }

}